html {
    background-color: #fdf2e0;
    margin: 0 auto;
    padding: 0;
    width: 100%;
    max-width: 1500px;
    /* HOW DO I USE THIS. Opacity built into rgba, picture in background:
    background: transparent url (something.png);
    background-color: rgba (0, 0, 0, 0.5) none; */
}

body {
  background-image: url("../img/index.jpg");
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center;
  background-attachment: fixed;
  background-color: black;
  background-color: #F3F2EE;
  margin: 0 auto;
}

/* ==========
flex 
========== */

.flex-container {
    display: flex;
    justify-content: space-between;
  }
  
  .item {
    /* flex: 1; */
    background-color: lightblue;
    padding: 10px;
    margin: 5px;
  }

  #box1 {
    width: 10%;
    background-color: yellow;
  }

  #box2 {
    width: 40%;
    background-color: aqua;
    /* you can achieve the layout with flexbox but it's hacky and obscure. */
    margin-right: auto;
    margin-left: 5%;
  }

  #box3 {
    width: 10%;
    background-color: hotpink;
  }

  /* ==========
  grid 
  =============*/
  
  .grid-container {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-gap: 10px;
  }
  
  .item {
    background-color: lightblue;
    padding: 10px;
  }
  
  #grid2 {
    margin: 0 20% 0 20%;
  }

  /* ==========
  grid area naming
  =============*/

  .grid-area-naming {
    margin-top: 10vh;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-auto-rows: minmax(100px, auto);
    /* grid-template-rows: minmax(100px, auto); */
    grid-gap: 2%;
    row-gap: 2%;
    column-gap: 2%;
    grid-template-areas: 
      "area3 area3 area3"
      "area1 area1 area2"
      "area1 area1 area2"
      "area1 area1 area2"
      "area1 area1 ....";
  }

  .area1 {
    grid-area: area1;
    background-color: #555555;
  }
  
  .area2 {
    grid-area: area2;
    background-color: green; 
  }

  .area3 {
    grid-area: area3;
    background-color: red;
  }
  
  /*==============================
  RESPONSIVE DESIGN: TABLET
==============================*/
@media screen and (max-width: 992px) {
  body {
    background-image: url("../img/index-tablet.jpg");
  }
}

/*==============================
  RESPONSIVE DESIGN: PHONE
==============================*/
@media screen and (max-width: 576px) {
  body {
    background-image: url("../img/index-mobile.jpg");
  }
}

  
    /* 
    box-sizing: border-box;
    margin: 0 auto;
    padding: 1em;
    .wrapper > div {}
    #f76707;
    #fff4e6;
    #ffa94d;
    #ffd8a8;
    #d9480f;
    */

     /* 
 .chessboard .square:nth-child(odd) {
    background-color: pink;
    transition: opacity 0.3s ease;
    grid-template-columns: repeat(9, 1fr);
    grid-template-rows: repeat(9, 1fr);
    background-color: lightcoral;
    background-color: lightblue;
    background-color: gray;
    background-color: beige;
  }
  */

  /* 
  a.link-div {  
  }
  a:hover {
  }
  a:active {
    color: yellow;
  }
  */


  /*==============================
  RESPONSIVE DESIGN: PHONE 
  - This is version 2 of responsive part of contact.css page. 
  - This code uses grid-area to lay things out instead of seperating the responsive menu from the main desktop site (in the html). 
  - Make sure to comment out "responsive menu" section in html of contact page. 
  - The other options works and passes the elegance test though. So will use that. (There's no 100% "right" way in coding.)
==============================*/
@media (max-width: 768px) {
  
  .container {
    width: 100%;
  }
  
  .grid-container {
    grid-template-columns: 1fr;
    grid-template-rows: minmax(100px, auto);
    grid-template-rows: 1fr 9fr;
    grid-template-areas: 
      /* "menu-area"   */
      "branding-area"
      "text-area";
  }

  .menu {
    display: none;
  }

  .text {
    width: 90%;
    margin: 0 auto;
  }

  .branding {
    display: flex;
  }

  .branding img {
    width: auto;
    height: 7vh;
  }

  .gradient-text {
    display: none;
  }
}